:-consult(bnf).
:-consult(basededatos).


preguntar_oracion(FraseValida) :-
    write('Por favor, ingrese los datos de su viaje, como el origen, el destino, la aerolinea en la que desea viajar, la clase en la que desea viajar y su presupuesto:\n'),
    readln(Frase, _, _, _, lowercase),
    ( oraciones_restantes(Frase,[]) ->
        write('Frase válida.\n'),
        FraseValida = Frase,
        extraerInfo(FraseValida, _, Info, []),
        verificar_datos_completos(Info);

        write('Frase no válida, inténtelo de nuevo.\n'),
        preguntar_oracion(FraseValida)
    ).

verificar_datos_completos(Info) :-
    ( falta_dato(origen, Info) ->
        preguntar_dato(origen, Info)
    ; falta_dato(destino, Info) ->
        preguntar_dato(destino, Info)
    ; falta_dato(aerolinea, Info) ->
        preguntar_dato(aerolinea, Info)
    ; falta_dato(clase, Info) ->
        preguntar_dato(clase, Info)
    ; falta_dato(presupuesto, Info) ->
        preguntar_dato(presupuesto, Info)
    ; % Si no falta nada, genera itinerario
        generar_itinerario(Info)
    ).

falta_dato(origen, Info) :-
    \+ member(origen(_), Info).
falta_dato(destino, Info) :-
    \+ member(destino(_), Info).
falta_dato(aerolinea, Info) :-
    \+ member(aerolinea(_), Info).
falta_dato(clase, Info) :-
    \+ member(clase(_), Info).
falta_dato(presupuesto, Info) :-
    \+ member(presupuesto(_), Info).

preguntar_dato(Dato, Info) :-
    format('Por favor, indique el/la ~w:\n', [Dato]),
    readln(Respuesta,_,_,_, lowercase),
    ( oraciones_restantes(Respuesta,[]) ->
        write('Frase válida.\n'),
        FraseValida = Respuesta,
        extraerInfo(FraseValida, _, NewInfo, Info),
        append(NewInfo, Info, MergedInfo),
        verificar_datos_completos(MergedInfo);

        write('Frase no válida, inténtelo de nuevo.\n'),
        preguntar_dato(Dato, Info)
    ).

agregar_dato(origen, Resp, Info, [origen(Resp) | Info]).
agregar_dato(destino, Resp, Info, [destino(Resp) | Info]).
agregar_dato(aerolinea, Resp, Info, [aerolinea(Resp) | Info]).
agregar_dato(clase, Resp, Info, [clase(Resp) | Info]).
agregar_dato(presupuesto, Resp, Info, [presupuesto(Resp) | Info]).

generar_itinerario(Info) :-
    obtener_datos(Info, OrigenIn, DestinoIn, Aerolinea, Clase, Presupuesto),
    preparar_datos(OrigenIn, DestinoIn, Origen, Destino),
    ( camino_mas_rapido(Origen, Destino, Aerolinea, Clase, Presupuesto, Tiempo, Ruta) ->
        mostrar_ruta(Ruta, Tiempo)
    ;
        write('Lo sentimos, no encontramos vuelos que coincidan con su búsqueda.\n')
    ).


% Traduce ciudad o país a código de aeropuerto
nombre_a_codigo(Nombre, Codigo) :-
    ato(Codigo, Nombre, _).  % ciudad
nombre_a_codigo(Nombre, Codigo) :-
    ato(Codigo, _, Nombre).  % país
nombre_a_codigo(Codigo, Codigo) :-
    ato(Codigo, _, _).       % ya es código

preparar_datos(OrigenIn, DestinoIn, Origen, Destino) :-
    nombre_a_codigo(OrigenIn, Origen),
    nombre_a_codigo(DestinoIn, Destino).



obtener_datos(Info, Origen, Destino, Aerolinea, Clase, Presupuesto) :-
    member(origen(Origen), Info),
    member(destino(Destino), Info),
    member(aerolinea(Aerolinea), Info),
    member(clase(Clase), Info),
    member(presupuesto(Presupuesto), Info).

mostrar_ruta([], _) :-
    write('No se encontró ruta.\n').

mostrar_ruta(Ruta, TiempoTotal) :-
    write('Su itinerario es:\n'),
    mostrar_segmentos(Ruta),
    format('Tiempo total estimado de vuelo: ~w horas.\n', [TiempoTotal]).

mostrar_segmentos([]).
mostrar_segmentos([[Aerolinea, Vuelo, Origen, Destino, Tiempo, Clase, Costo] | Resto]) :-
    ato(Origen, CiudadO, PaisO),
    ato(Destino, CiudadD, PaisD),
    format('Vuelo ~w (~w) desde ~w, ~w hasta ~w, ~w con ~w en clase ~w, duración ~w horas, costo $~w.\n',
           [Vuelo, Aerolinea, CiudadO, PaisO, CiudadD, PaisD, Aerolinea, Clase, Tiempo, Costo]),
    mostrar_segmentos(Resto).




iniciar():-
	write('Bienvenido a TravelAgencyLog, la mejor logica de llegar a su destino. \n'),
	preguntar_oracion(_).
